<?php

namespace ABMundi\NotificationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    
    /**
     * Get Notifications By User
     * 
     * @param UserInterface $user
     * 
     * @return type 
     */
    public function getNotifications(UserInterface $user, $channel='main')
    {
        $qb = $this->getNotificationsQuery($user);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get Unread Notifications By User
     * 
     * @param UserInterface $user
     * 
     * @return type 
     */
    public function getUnreadNotifications(UserInterface $user, $channel='main')
    {
        $qb = $this->getNotificationsQuery($user, $channel);
        $qb->andWhere("n.readAt IS NULL");

        return $qb->getQuery()->getResult();
    }
    
    /**
     * Get Unread Notifications By User
     * 
     * @param UserInterface $user
     * 
     * @return type 
     */
    public function getUnsentNotifications(UserInterface $user, $channel='main')
    {
        $qb = $this->getNotificationsQuery($user, $channel);
        $qb->andWhere("n.sentAt IS NULL");

        return $qb->getQuery()->getResult();
    }

    /**
     * Get latest Notifications By User
     * 
     * @param UserInterface $user  User
     * @param integer       $limit Limit of results
     * 
     * @return type 
     */
    public function getLatestNotifications(UserInterface $user, $limit, $channel='main')
    {
        $qb = $this->getNotificationsQuery($user, $channel);
        $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }
    
    /**
     * Get last notification sent
     * 
     * @param UserInterface $user  User
     * @param integer       $limit Limit of results
     * 
     * @return type 
     */
    public function getLastNotifications(UserInterface $user, $channel='main', $eventKey=null, $period = '5 minutes')
    {
        $date = new \DateTime('- '.$period);
        
        $qb = $this->getNotificationsQuery($user, $channel);
        $qb->andWhere("n.createdAt > :date")
            ->setParameter('date', $date);
        $qb->orderBy("n.createdAt", "DESC");

        $notifications = $qb->getQuery()->getResult();
        
        if (!$eventKey) {
            return $notifications;
        }
        $eventKeysNotifications = array();
        foreach($notifications as $notification) {
            if ($notification->getEventKey()==$eventKey) {
                $eventKeysNotifications[] = $notification;
            }
        }
        
        return $eventKeysNotifications;
    }
    
    /**
     * Get last notification sent
     * 
     * @param UserInterface $user  User
     * @param integer       $limit Limit of results
     * 
     * @return type 
     */
    public function getLastSentNotifications(UserInterface $user, $channel='main', $eventKey=null, $period = '5 minutes')
    {
        $date = new \DateTime('- '.$period);
        
        $qb = $this->getNotificationsQuery($user, $channel);
        $qb->andWhere("n.sentAt IS NOT NULL");
        $qb->andWhere("n.sentAt > :date")
            ->setParameter('date', $date);
        $qb->orderBy("n.sentAt", "DESC");

        $notifications = $qb->getQuery()->getResult();
        
        if (!$eventKey) {
            return $notifications;
        }
        $eventKeysNotifications = array();
        foreach($notifications as $notification) {
            if ($notification->getEventKey()==$eventKey) {
                $eventKeysNotifications[] = $notification;
            }
        }
        
        return $eventKeysNotifications;
    }
    
    /**
     * Get last notification sent
     * 
     * @param UserInterface $user  User
     * @param integer       $limit Limit of results
     * 
     * @return type 
     */
    
    public function getLastSentNotification(UserInterface $user, $channel='main', $eventKey=null, $period = '5 minutes')
    {
        $notifications = $this->getLastSentNotification($user, $channel, $eventKey, $period);
        if ($notifications) {
            return $notifications[0];
        }
        return null;
    }

    /**
     * Get Notifications By User Query
     * 
     * @param UserInterface $user
     * 
     * @return type 
     */
    public function getNotificationsQuery(UserInterface $user, $channel='main')
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
                ->select("n")
                ->from("ABMundi\NotificationBundle\Entity\Notification", "n")
                ->join("n.user", "u")
                ->where("u.id = :user_id")
                ->andWhere("n.channel = :channel")
                ->orderBy("n.updatedAt", "DESC")
                ->setParameter('user_id', $user->getId())
                ->setParameter('channel', $channel);

        return $qb;
    }

    /**
     * Set notifications of a Users as read
     * 
     * @param UserInterface $user
     */
    public function setNotificationsAsRead(UserInterface $user, $channel='main')
    {
        $em = $this->getEntityManager();
        $notifications = $this->getUnreadNotifications($user, $channel);
        foreach ($notifications as $notification) {
            $notification->setAsRead();
            $em->persist($notification);
        }
        $em->flush();
    }

    /**
     * Function that clear all notifications
     */
    public function clear()
    {
        $query = $this->_em->createQuery('DELETE ABMundi\NotificationBundle\Entity\Notification');
        $query->execute();
    }
}