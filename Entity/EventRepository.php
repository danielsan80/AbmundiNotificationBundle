<?php

namespace ABMundi\NotificationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    /**
     * Converts the subject object into a persistable string
     *
     * @param NotificationEvent $event
     */
    public function updateSubjectStrings(Event $event)
    {
        $subject = $event->getSubject();

        if (null === $subject) {
            $event->setSubjectClass(null);
            $event->setSubjectIdentifiers(null);

            return;
        }

        $metadata = $this
                ->getEntityManager()
                ->getClassMetadata(get_class($subject));

        $event->setSubjectClass($metadata->name);
        $event->setSubjectIdentifiers($metadata->getIdentifierValues($subject));
    }

    /**
     * Converts the persisted subject string into a reference
     * object, or queries for the appropriate object.
     * 
     * @param NotificationEvent $event     Event
     * @param boolean           $reference Reference
     * 
     * @return void
     */
    public function updateSubjectObject(Event $event, $reference = true)
    {
        if ($reference) {
            $subject = $this->getEntityManager()->getReference(
                $event->getSubjectClass(), $event->getSubjectIdentifiers());
        } else {
            $subject = $this->getEntityManager()->find(
                $event->getSubject(), $event->getSubjectIdentifiers());
        }

        $event->setSubject($subject);
    }

    /**
     * Get Events By User
     * 
     * @param UserInterface $user
     * 
     * @return type 
     */
    public function getEventsByUser(UserInterface $user)
    {
        $query = $this->getEntityManager()->createQuery("
            SELECT e
            FROM ABMundi\NotificationBundle\Entity\Event e
            JOIN e.actor u
            WHERE u.id = :actor_id
            ORDER BY e.createdAt DESC
        ")
            ->setParameter('actor_id', $user->getId());

        return $query->getResult();
    }

    /**
     * Function that clear all events
     */
    public function clear()
    {
        $query = $this->_em->createQuery('DELETE ABMundi\NotificationBundle\Entity\Event');
        $query->execute();
    }

}